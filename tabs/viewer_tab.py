# tabs/viewer_tab.py
from __future__ import annotations
import streamlit as st
from pymatgen.core import Structure
from pymatgen.transformations.standard_transformations import SupercellTransformation
from pymatgen.io.ase import AseAtomsAdaptor
import py3Dmol

def _pmg_to_xyz(pmg: Structure) -> str:
    """Return multi-molecule XYZ string."""
    atoms = AseAtomsAdaptor.get_atoms(pmg)
    lines = [str(len(atoms)), "Generated by Materials Studio"]
    for s, (x, y, z) in zip(atoms.get_chemical_symbols(), atoms.get_positions()):
        lines.append(f"{s} {x:.6f} {y:.6f} {z:.6f}")
    return "\n".join(lines)

def _render_3d(pmg: Structure, height=420):
    xyz = _pmg_to_xyz(pmg)
    view = py3Dmol.view(width=640, height=height)
    view.addModel(xyz, "xyz")
    view.setStyle({"stick": {"radius": 0.18}, "sphere": {"scale": 0.28}})
    view.zoomTo()
    return view

def viewer_tab(pmg_obj: Structure | None):
    st.subheader("Structure Viewer & Supercell")
    if pmg_obj is None:
        st.info("Upload or select a structure to view and build supercells.")
        return

    with st.expander("Lattice parameters (Å, degrees)", expanded=True):
        a, b, c = pmg_obj.lattice.abc
        alpha, beta, gamma = pmg_obj.lattice.angles
        st.text(f"a={a:.4f}, b={b:.4f}, c={c:.4f} | α={alpha:.2f}, β={beta:.2f}, γ={gamma:.2f}")

    c1, c2, c3, c4 = st.columns([1,1,1,1])
    with c1:
        na = st.number_input("na", min_value=1, max_value=20, value=1, step=1, key="viewer_na")
    with c2:
        nb = st.number_input("nb", min_value=1, max_value=20, value=1, step=1, key="viewer_nb")
    with c3:
        nc = st.number_input("nc", min_value=1, max_value=20, value=1, step=1, key="viewer_nc")
    with c4:
        build_btn = st.button("Build Supercell", type="primary", key="viewer_build")

    if build_btn and (na*nb*nc) > 1:
        trans = SupercellTransformation([[na,0,0],[0,nb,0],[0,0,nc]])
        pmg_obj = trans.apply_transformation(pmg_obj)

    view = _render_3d(pmg_obj, height=420)
    view_html = view._make_html()
    st.components.v1.html(view_html, height=440, scrolling=False)

    # Downloads
    colx, coly = st.columns(2)
    with colx:
        st.download_button(
            "Download CIF",
            pmg_obj.to(fmt="cif"),
            file_name="structure.cif",
            key="viewer_dl_cif",
        )
    with coly:
        st.download_button(
            "Download XYZ",
            _pmg_to_xyz(pmg_obj),
            file_name="structure.xyz",
            key="viewer_dl_xyz",
        )

    st.caption("Tip: Use the supercell controls (na, nb, nc) to expand the structure before downloads.")
